# docker version: '3.8'

# SQL DB
services:
  db:
    image: postgres:16-alpine
    restart: always
    environment:
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    ports:
      - "5432:5432"
    volumes:
      - ./data:/var/lib/postgresql/data
      - ./init_scripts:/docker-entrypoint-initdb.d
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 5s
      timeout: 5s
      retries: 5

#pgadmin
  pgadmin:
    image: dpage/pgadmin4 # Imagen oficial de PgAdmin 4
    restart: always
    environment:
      PGADMIN_DEFAULT_EMAIL: ${PGADMIN_DEFAULT_EMAIL}     # Email para el inicio de sesión en PgAdmin
      PGADMIN_DEFAULT_PASSWORD: ${PGADMIN_DEFAULT_PASSWORD} # Contraseña para el inicio de sesión en PgAdmin
      PGADMIN_LISTEN_PORT: 80                 # Puerto donde PgAdmin escuchará internamente
    ports:
      - "8080:80"                             # Mapea el puerto 8080 del host al puerto 80 del contenedor PgAdmin
    volumes:
      - ./pgadmin-data:/var/lib/pgadmin       # Persistencia de los datos de configuración de PgAdmin
    depends_on:
      db:
        condition: service_healthy            # Asegura que PgAdmin solo inicie cuando la DB esté healthy
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "5"

#DBT

  dbt:
    build:
      context: .
      dockerfile: dockerfile  # <- Asegurate de tener este archivo en la raíz
    container_name: dbt_container
    volumes:
      - ./dbt_proyect:/app/ecommerce_dbt
      - ./dbt_profile:/root/.dbt
    depends_on:
      db:
        condition: service_healthy
    command: tail -f /dev/null

volumes:
    data:
    pgadmin-data: